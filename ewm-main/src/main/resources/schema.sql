CREATE TABLE IF NOT EXISTS users
(
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email VARCHAR                                 NOT NULL,
    name  VARCHAR                                 NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT uq_user_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS categories
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR                                 NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT uq_category_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS events
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation         VARCHAR                                 NOT NULL,
    category_id        BIGINT                                  NOT NULL,
    confirmed_requests INTEGER DEFAULT 0                       NOT NULL,
    created_date       TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    description        VARCHAR                                 NOT NULL,
    event_date         TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    initiator_id       BIGINT                                  NOT NULL,
    lat                FLOAT                                   NOT NULL,
    lon                FLOAT                                   NOT NULL,
    paid               BOOLEAN,
    participant_limit  INTEGER DEFAULT 0                       NOT NULL,
    published_date     TIMESTAMP WITHOUT TIME ZONE,
    request_moderation BOOLEAN DEFAULT true                    NOT NULL,
    state              VARCHAR                                 NOT NULL,
    title              VARCHAR                                 NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (category_id) REFERENCES categories (id),
    FOREIGN KEY (initiator_id) REFERENCES users (id),
    CHECK ( state IN ('PENDING', 'PUBLISHED', 'CANCELED'))
);

CREATE TABLE IF NOT EXISTS participation_requests
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id     BIGINT                                  NOT NULL,
    requester_id BIGINT                                  NOT NULL,
    created_date TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    status       VARCHAR                                 NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT uq_event_requester UNIQUE (event_id, requester_id),
    FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE,
    FOREIGN KEY (requester_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS compilations
(
    id     BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    pinned BOOLEAN,
    title  VARCHAR                                 NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS event_compilations
(
    event_id       BIGINT NOT NULL,
    compilation_id BIGINT NOT NULL,
    PRIMARY KEY (event_id, compilation_id),
    FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE,
    FOREIGN KEY (compilation_id) REFERENCES compilations (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS comments
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    message      VARCHAR                                 NOT NULL,
    user_id      BIGINT                                  NOT NULL,
    event_id     BIGINT                                  NOT NULL,
    created_date TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE
);

CREATE INDEX idx_annotation on events (annotation);
CREATE INDEX idx_category on events (category_id);
CREATE INDEX idx_description on events (description);
CREATE INDEX idx_event_date on events (event_date);
CREATE INDEX idx_paid on events (paid);
CREATE INDEX idx_confirmed on events (confirmed_requests);
CREATE INDEX idx_participant on events (participant_limit);
CREATE INDEX idx_state on events (state);
CREATE INDEX idx_initiator on events (initiator_id);
CREATE INDEX idx_pinned on compilations (pinned);
CREATE INDEX idx_requester on participation_requests (requester_id);
CREATE INDEX idx_request_event on participation_requests (event_id);
CREATE INDEX idx_request_status on participation_requests (status);
CREATE INDEX idx_comment_event on comments (event_id);
CREATE INDEX idx_comment_user on comments (user_id);